trigger:
- none

variables:
- name: RUN_SUBSCRIPTION
  value: $[ split(variables.CLUSTER_RESOURCE_ID, '/')[2] ]
- name: RUN_RESOURCEGROUP
  value: $[ split(variables.CLUSTER_RESOURCE_ID, '/')[4] ]
- name: RUN_RESOURCENAME
  value: $[ split(variables.CLUSTER_RESOURCE_ID, '/')[8] ]
- name: RUN_SCHEDULED_AT
  value: $[ replace(variables.SCHEDULED_AT_UTC,':', '-') ]

# pipeline run name is set to the following format
name: $(RUN_SCHEDULED_AT)_$(RUN_SUBSCRIPTION)_$(RUN_RESOURCEGROUP)_$(RUN_RESOURCENAME)_$(UPGRADE_VERSION)
appendCommitMessageToRunName: false

pool:
  vmImage: ubuntu-latest

stages:
- stage: Scheduling
  displayName: Scheduling
  jobs:
  - job: preScheduleChecks
    displayName: Run pre-upgrade checks before scheduluing
    steps:
    - task: AzureCLI@2
      displayName: 'All pre-upgrade checks'
      inputs:
        azureSubscription: 'aks-lab-connection'
        scriptType: 'bash'
        scriptLocation: 'scriptPath'
        scriptPath: 'aks-upgrade-helper.sh'
        arguments: '-r $(CLUSTER_RESOURCE_ID) -t $(UPGRADE_VERSION)'
  - job: calculateSchedule
    dependsOn: preScheduleChecks
    displayName: calcuate minutes until scheduled upgrade 
    steps:
    - script: |
        if minutes=$(bash get-schedule-delay.sh "${SCHEDULED_AT_UTC}"); then
          echo "Setting variable DELAY_MINUTES to ${minutes}"
          echo "##vso[task.setvariable variable=DELAY_MINUTES;isOutput=true]${minutes}"
        else
           echo "unable to get schedule delay. Please check SCHEDULED_AT_UTC variable value."
           echo "bash get-schedule-delay.sh \"${SCHEDULED_AT_UTC}\""
           exit 1
        fi
      displayName: get schedule delay in minutes
      name: getDelayMinutes
      env:
        SCHEDULED_AT_UTC: $[ variables.SCHEDULED_AT_UTC ]
    - script: |
        echo "DELAY_MINUTES: $(getDelayMinutes.DELAY_MINUTES)"
      displayName: Print DELAY_MINUTES
      name: printDelayMinutes
  
- stage: Waiting
  displayName: Wait for scheduled upgrade time
  jobs:
  - job: wait
    displayName: "wait for upgrade scheduled at $[variables.SCHEDULED_AT_UTC]"
    pool: server # agentless job
    timeoutInMinutes:  43200 # max schedule ahead is 30 days
    variables:
      DELAY_MINUTES: $[stageDependencies.Scheduling.calculateSchedule.outputs['getDelayMinutes.DELAY_MINUTES']]
    steps:
    - task: Delay@1
      displayName: "Sleep for $[ variables.DELAY_MINUTES ] minutes"
      inputs:
        delayForMinutes: $(DELAY_MINUTES)
        
- stage: Upgrading
  displayName: Upgrade AKS cluster
  jobs:
  - job: preUpgradeChecks
    displayName: Run pre-upgrade checks before upgrading
    steps:
    - task: AzureCLI@2
      displayName: 'All pre-upgrade checks'
      inputs:
        azureSubscription: 'aks-lab-connection'
        scriptType: 'bash'
        scriptLocation: 'scriptPath'
        scriptPath: 'aks-upgrade-helper.sh'
        arguments: '-r $(CLUSTER_RESOURCE_ID) -t $(UPGRADE_VERSION)'
  - job: upgrade
    dependsOn: preUpgradeChecks
    displayName: Upgrade AKS cluster
    steps:
    - task: AzureCLI@2
      displayName: 'Upgrade AKS cluster'
      inputs:
        azureSubscription: 'aks-lab-connection'
        scriptType: 'bash'
        scriptLocation: 'scriptPath'
        scriptPath: 'aks-upgrade.sh'
        arguments: '-r $(CLUSTER_RESOURCE_ID) -t $(UPGRADE_VERSION)'

