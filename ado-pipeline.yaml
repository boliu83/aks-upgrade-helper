trigger:
- none

variables:
- name: RUN_SUBSCRIPTION
  value: $[ split(variables.CLUSTER_RESOURCE_ID, '/')[2] ]
- name: RUN_RESOURCEGROUP
  value: $[ split(variables.CLUSTER_RESOURCE_ID, '/')[4] ]
- name: RUN_RESOURCENAME
  value: $[ split(variables.CLUSTER_RESOURCE_ID, '/')[8] ]
- name: RUN_SCHEDULED_AT
  value: $[ replace(variables.SCHEDULED_AT_UTC,':', '-') ]

# pipeline run name is set to the following format
name: $(RUN_SCHEDULED_AT)_$(RUN_SUBSCRIPTION)_$(RUN_RESOURCEGROUP)_$(RUN_RESOURCENAME)_$(UPGRADE_VERSION)
appendCommitMessageToRunName: false

pool:
  vmImage: ubuntu-latest

stages:
- stage: Scheduling
  displayName: Scheduling
  jobs:
  - job: calculate_minutes_until
    displayName: calcuate minutes until scheduled upgrade 
    steps:
    - script: |
        if minutes=$(bash get-schedule-delay.sh $(SCHEDULED_AT_UTC)); then
           echo "##vso[task.setvariable variable=DELAY_MINUTES;]${minutes}"
        else
           echo "unable to get schedule delay. Please check SCHEDULED_AT_UTC variable value."
           echo "SCHEDULED_AT_UTC: $(SCHEDULED_AT_UTC)"
           echo "bash get-schedule-delay.sh $(SCHEDULED_AT_UTC)"
           exit 1
        fi
        displayName: get schedule delay in minutes
        env:
          SCHEDULED_AT_UTC: $(SCHEDULED_AT_UTC)
  
- stage: Waiting
  displayName: Wait for scheduled upgrade time at $(SCHEDULED_AT_UTC)
  jobs:
  - job: wait
    displayName: wait for upgrade scheduled in $(DELAY_MINUTES) minutes
    pool: server # agentless job
    timeoutInMinutes:  43200 # max schedule ahead is 30 days
    steps:
    - task: Delay@1
      inputs:
        delayForMinutes: $(DELAY_MINUTES)
        
